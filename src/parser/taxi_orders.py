import asyncio
import pickle 
import requests
from time import sleep

from telethon.sync import TelegramClient

from selenium import webdriver
from selenium.webdriver.common.by import By
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service

from loader import db, API_KEY, CLID, API_KEY_MAP, API_ID, API_HASH
from logger import logger


def getting_coordinates(address: str) -> dict:
    """
        –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã,
        –∞ –Ω–∞ –≤—Ö–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å
    """
    url = f"https://geocode-maps.yandex.ru/1.x/?apikey={API_KEY_MAP}&geocode={address}&rspnrspn=1&format=json&results=1"
    response = requests.get(url)
    data = response.json()
    
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        coordinates_str = data["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]["Point"]["pos"]
        longitude, latitude = map(float, coordinates_str.split())
        logger.info(f"–§—É–Ω–∫—Ü–∏—è getting_coordinates –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞, –≤–æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: \n{longitude, latitude}")
        return {'longitude': longitude, 'latitude': latitude}
    except (KeyError, IndexError) as e:
        logger.error(f"–§—É–Ω–∫—Ü–∏—è getting_coordinates –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞, –≤–æ—Ç –æ—Ç–≤–µ—Ç response {response}, –∞ –≤–æ—Ç –æ—à–∏–±–∫–∞: \n{e}")
        logger.info("–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –≥–µ–æ–∫–æ–¥–µ—Ä–∞ –∏–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è.")


def order_price(clid, apikey, long1, lat1, long2, lat2):
    """
        —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∞–ø–∏ –∫–ª—é—á–∏ —è–Ω–¥–µ–∫—Å–∞ –∏ 
        –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 2-—Ö –∞–¥—Ä–µ—Å–æ–≤, –Ω–∞ –≤—ã—Ö–æ–¥–µ –≤—ã–¥–∞–µ—Ç —Ü–µ–Ω—É
        —Ç–∞–∫—Å–∏ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ–≤.
    """
    print(clid, apikey, long1, lat1, long2, lat2, end="\n")
    class_str = "econom"
    req_str = "<req_str>"
    url = f"https://taxi-routeinfo.taxi.yandex.net/taxi_info?clid={clid}&apikey={apikey}&rll={long1},{lat1}~{long2},{lat2}&class={class_str}&req={req_str}&lang=ru"        
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ —Ç–∞–∫—Å–∏: {data}")
            return data
        else:
            error_message = f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}"
            logger.error(error_message)
            return error_message

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–µ —Ç–∞–∫—Å–∏: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"


async def send_telegram_message(message: str, username: int) -> None:
    async with TelegramClient('/home/vol_user/taxi_yandex_bot/src/parser/anon.session', API_ID, API_HASH) as client:
        await client.send_message(username, message)


async def add_db(drivers_list: str):
    """
        –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        db.create_table_orders()
        db.create_table_drivers()
        if drivers_list is not None and len(drivers_list) > 0:
            for i in range(0, len(drivers_list), 6):
                fio = drivers_list[i]
                address_1 = drivers_list[i + 4] if i + 4 < len(drivers_list) else None
                address_2 = drivers_list[i + 5] if i + 5 < len(drivers_list) else None
                
                full_address_1 = f"{address_1}, –°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"
                full_address_2 = f"{address_2}, –°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"
            
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è –∏ –∞–¥—Ä–µ—Å–æ–≤
                    check_table = db.checking_data_table({'–§–ò–û': fio, '1 —É–ª–∏—Ü–∞': full_address_1, '2 —É–ª–∏—Ü–∞': full_address_2})
                except Exception as ex:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã —Å —Ñ—É–Ω–∫—Ü–∏–µ–π sql.checking_data_table: {e}")
                    check_table = None    
                
                sleep(5)
                if not check_table:
                    coordinates_1 = getting_coordinates(full_address_1)
                    coordinates_2 = getting_coordinates(full_address_2)
                    print(coordinates_1, coordinates_2)
                    if coordinates_1 is not None and coordinates_2 is not None:
                        order_info = order_price(CLID, API_KEY, coordinates_1['longitude'], coordinates_1['latitude'], coordinates_2['longitude'], coordinates_2['latitude'])
                        price_value = order_info.get('options', [{}])[0].get('price', 0)
                        order_distance = order_info.get("distance", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                        order_time = order_info.get("time_text", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                        
                        driver_info = {
                                '–§–ò–û': fio,
                                '1 —É–ª–∏—Ü–∞': full_address_1,
                                '2 —É–ª–∏—Ü–∞': full_address_2,
                                '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 1 —É–ª–∏—Ü—ã': coordinates_1,
                                '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 2 —É–ª–∏—Ü—ã': coordinates_2,
                                '—Ü–µ–Ω–∞': price_value
                            }            
                            
                        if driver_info:
                            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
                            db.add_order_to_database(driver_info)       
                            message = (
                                    f"üÜï **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!**\n\n"
                                    f"üë§ **–í–æ–¥–∏—Ç–µ–ª—å:** {driver_info['–§–ò–û']}\n"
                                    f"üè† **–û—Ç–∫—É–¥–∞:** {driver_info['1 —É–ª–∏—Ü–∞']}\n"
                                    f"üè† **–ö—É–¥–∞:** {driver_info['2 —É–ª–∏—Ü–∞']}\n"
                                    f"üí∞ **–¶–µ–Ω–∞:** {driver_info['—Ü–µ–Ω–∞']} —Ä—É–±.\n"
                                    f"üöñ **–í—Ä–µ–º—è –≤ –ø—É—Ç–∏:** {order_time}.\n"
                                    f"üåç **–î–∏—Å—Ç–∞–Ω—Ü–∏—è:** {round(order_distance / 1000)} –∫–º."
                                )
                            username_info = db.get_driver_profile(fio)
                            logger.info(message)
                            if username_info and len(username_info) > 0:
                                username_gt = username_info[0]               
                                await send_telegram_message(message, username_gt)
                                await send_telegram_message(message, 1851047530)     
                                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {username_gt} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                
                else:
                    logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è {fio} —Å –∞–¥—Ä–µ—Å–∞–º–∏ {address_1} –∏ {address_2} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã —Å —Ñ—É–Ω–∫—Ü–∏–µ–π add_db: {e}")
        logger.error("Exception occurred", exc_info=True)


async def order_addresses():
    """
        –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏—Ç –∑–∞–∫–∞–∑—ã —Ç–∞–∫—Å–∏—Å—Ç–æ–≤ –±–µ—Å–∫–∞–Ω–µ—á–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤
        —Ñ—É–Ω–∫—Ü–∏—é add_db()
    """
    chrome_options = webdriver.ChromeOptions()
    chrome_options.page_load_strategy = "normal" #eager
    # chrome_options.add_argument("--headless")
    # chrome_options.add_argument(fr"--user-data-dir=/home/vol_user/taxi_yandex_bot/src/parser/file_of_selenium")
    service = Service(executable_path=ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    
    url = 'https://fleet.yandex.ru/map/drivers?statuses=in_order&sortBy=status_duration&sortDirection=desc&park_id=c0a8c5228fff4796abc901bcec379d45&theme=day' 
    driver.get(url)
    
    with open(r"C:\work\taxi_yandex_bot\src\parser\session.txt", "rb") as file:
        cookies = pickle.load(file)

    for cookie in cookies:
        driver.add_cookie(cookie)

    driver.refresh()
    
    while True:
        try:
            sleep(5)
            fio_element = driver.find_element(By.CLASS_NAME, "wrAtHm")
            fio_text = fio_element.text.split("\n")
            
            # count_driver = fio_text[2] # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ –∑–∞–∫–∞–∑–∞—Ö
            
            if len(fio_text) > 10:
                logger.info(f"–§—É–Ω–∫—Ü–∏—è order_addresses –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞, –≤–æ—Ç –∞–¥—Ä–µ—Å–∞\n{fio_text[10:]}")
                await add_db(fio_text[10:])
            else:
                sleep(30)
                logger.info("–§—É–Ω–∫—Ü–∏—è order_addresses –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞, –Ω–µ –Ω–∞—à–ª–∞ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –≤–µ—Ä–Ω—É–ª–∞ None")
        except KeyboardInterrupt as e:
            driver.quit()
            logger.error(f"–§—É–Ω–∫—Ü–∏—è order_addresses –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞, –≤–æ—Ç –æ—à–∏–±–∫–∞: \n{e}")
            print("–†–∞–±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


async def main():
    await order_addresses()
    

if __name__ == "__main__":
    # while True:
    asyncio.run(main())
    # sleep(10)